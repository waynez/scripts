#!/usr/bin/env python

import os
import sys
import json
import argparse
import requests
from collections import OrderedDict

if __name__ == '__main__':
   parser = argparse.ArgumentParser()
   parser.add_argument('source', metavar='src', help="The source of the JSON text to read, could be a file or URL")
   parser.add_argument('--payload', metavar='payload', help="When used with URL, the payload in JSON file to be sent")
   args = parser.parse_args()
   source = args.source
   payload = args.payload
   if os.path.isfile(source):
       with open(source, 'r') as fp:
           try:
               data = json.load(fp, object_pairs_hook=OrderedDict)
               print(json.dumps(data, indent=4))
           except:
               print("Error loading JSON from {}".format(source))

               print('\n'.join(fp.readlines()[:10]))
               sys.exit(-1)
   elif 'http' in source.lower():
       try:
           param = None
           if payload:
              payload = os.path.join(os.getcwd(), args.payload)
              assert(os.path.isfile(payload))
              with open(payload, 'r') as fp:
                 param = json.load(fp)
           response = requests.request('GET', source, json=param)
           if(response.ok):
               try:
                   data = json.loads(response.content)
                   print(json.dumps(data, indent=4))
               except:
                   print("URL doesn't respond in JSON! The first 10 lines of the response:\n")

                   print('\n'.join(response.text.splitlines()[:10]))
                   sys.exit(-1)
           else:
               print("URL doesn't respond properly! {}".format(response.status_code))
               print("Remote server says: {}".format(response.content))
               sys.exit(-1)
       except requests.exceptions.RequestException as e:
           print("Exception:\n{}".format(e))
           sys.exit(-1)
   else:
      # Try load the input with JSON
      try:
         data = json.loads(source)
         print(json.dumps(data, indent=4))
      except Exception as e:
         print("Exception:\n{}".format(e))
         sys.exit(-1)

   sys.exit(0)
